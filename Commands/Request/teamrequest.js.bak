const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js')
const TeamRequest = require('../../Models/TeamRequest')

module.exports = {
    team: "non",
    data: new SlashCommandBuilder()
        .setName("teamrequest")
        .setDMPermission(false)
        .setDescription("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É")
        .addStringOption(option =>
            option.setName("name")
                .setDescription("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ò–º—è")
                .setRequired(true)
                .setMaxLength(20)
        )
        .addStringOption(option =>
            option.setName("post")
                .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–æ–∫–æ–π –ø–æ—Å—Ç –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ")
                .addChoices(
                    {name: "rpk", value: "–ö—É—Ä–∞—Ç–æ—Ä"},
                    {name: "dev", value: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"},
                    {name: "ivent", value: "–ò–≤–µ–Ω—Ç–æ–ª–æ–≥"},
                )
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName("steamid")
                .setDescription("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à SteamID_64")
                .setRequired(true)
                .setMaxLength(17)
                .setMinLength(17)
        )
        .addStringOption(option =>
            option.setName("stage")
                .setDescription("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç")
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName("biografy")
                .setDescription("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–∏ —Ä–∞–±–æ—Ç—ã")
                .setRequired(false)
        ),
        //,
    async execute(interaction) {
        const { options, guildId, member, user, guild } = interaction
        let channel
        if (guildId == "1054804473224110080") channel = guild.channels.cache.get("1075731128511631371") //1054804473224110080 lost chance

        const name = options.getString("name")
        const post = options.getString("post")
        const SteamID = options.getString("steamid")
        const stage = options.getString("stage")
        let Bio = options.getString("biografy")

        if (Bio === null) Bio = "-"

        //console.log(Bio)
        const embed = new EmbedBuilder()
            .setColor("Orange")
            .setAuthor({ name: user.tag, iconURL: user.displayAvatarURL({ dynamic: true }) })
            .addFields(
                { name: "–ò–º—è", value: name, inline: false },
                { name: "–ü–æ—Å—Ç", value: post, inline: false },
                { name: "Discord Tag", value: `<@${user.id}>`, inline: false },
                { name: "SteamID64", value: SteamID, inline: true }
            )
            .addFields(
                { name: "–†–∞–±–æ—Ç—ã", value: Bio, inline: true },
                { name: "–°—Ç–∞—Ç—É—Å", value: "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline: true },
                { name: "–°—Ç–∞–∂", value: stage, inline: false}
            )
            .setTimestamp()

        const buttons = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId("teamsuggest-accept").setLabel("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å").setStyle(ButtonStyle.Success),
            new ButtonBuilder().setCustomId("teamsuggest-deceline").setLabel("‚õî –û—Ç–∫–∞–∑–∞—Ç—å").setStyle(ButtonStyle.Danger),
            new ButtonBuilder().setCustomId("teamsuggest-process").setLabel("üëã –í—ã–∑–≤–∞—Ç—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ").setStyle(ButtonStyle.Primary),
        )
        try {
            const testToRu = /[0-9]/;
            if (testToRu.test(embed.data.fields[0].value) === true)
                return interaction.reply({ content: "–ù–µ –±—ã–≤–∞–µ—Ç –∏–º—ë–Ω —Å —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ —Ü–∏—Ñ—Ä", ephemeral: true })
            if(!SteamID.startsWith('7656119')) return interaction.reply({content: "–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç steamid", ephemeral: true})
            
            //await channel.send({content: "Use `/suggest` in the bot-commands channel to submit your suggestion"})
            TSuggestion.findOne({DisTag: user.id, GuildID: guildId}, async (err,obj) => {
                if(err) throw err
                if (!obj) {
                    let m = await channel.send({ embeds: [embed], components: [buttons] ,fetchReply: true })
                    await TSuggestion.create({
                        GuildID: guildId, 
                        MessageID: m.id,
                        DisID: user.id
                    })
                    await interaction.reply({ content: "–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–Ω–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.", ephemeral: true })
                } else {
                    await interaction.reply({ content: "–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", ephemeral: true }) 
                }
            })
        } catch (err) {
            console.log(err)
        }
    }
}